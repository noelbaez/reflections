What happens when you initialize a repository? Why do you need to do it?

  * It creates a empty git repository in the actually directory.
    Executing the command: git init
  * You have to do it in order to be able to save the history (versions).
    
How is the staging area different from the working directory and the repository?
What value do you think it offers?

  * The staging area contains only the files desired to be included in a commit while
  the working directory may contains all the files of the project.

  How can you use the staging area to make sure you have one commit per logical
change?

   * Using command 'git add' you normallh add the files to the staging area that belongs
   to a logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  * When you want to give a descriptive name to a group of versions instead of using a commit ID
  * To keep an organized and structured versions history

How do the diagrams help you visualize the branch structure?
  
  * Using diagrams you can have a global view of the different branchs and commits history of
    your project.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  * The result was to take only the modifications that were valid for the branches selected,
  in this case two branches.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

  Git’s automatic merging 
  =======================
  PROS: * It saves a lot of time
        * It shows also way which files can't be merged automatically

  CONS: * You depend on the accuracy of the Git's program

  always doing merges manually
  ============================
  PROS: * Doing manually is recommended when there are conflicts between versions

  CONS: * Always doing merge manually it would require a lot of effort and time
